const {test,expect}= require('@playwright/test')
const {LoginFunction} = require('../../../support/LoginFunctions/LoginFunction')
const {ProjectFunction} = require('../../../support/ProjectFunctions/ProjectFunction')
const {CartridgeFunction} = require('../../../support/CartridgeFunctions/CartridgeFunction')
const {PluginFunction} = require('../../../support/PluginFunctions/PluginFunction')
const { WorkspaceFunction } = require('../../../support/WorkspaceFunctions/WorkspaceFunction')
import { UniversalFunction } from "../../../support/UniversalFunctions/UniversalFunction"
import * as univMessage from "../../Smoke/UniversalMessage/samples/universal_sample.json"
const fs = require('fs');
test.describe("Universal Message Plugin",()=>{
    let page;
    test.beforeAll(async({browser},workerInfo)=>{
        const filePath = 'config.txt';
        const url = fs.readFileSync(filePath, 'utf-8').trim();
        const context=await browser.newContext()
        page=await context.newPage()
       
        if(url.includes('localhost'))
        {
            await page.goto('http://localhost:8090/')
        const uploadProject = new ProjectFunction(page);
        //await uploadProject.uploadProject('./src/Smoke/UniversalMessage/testProject/UniversalProj.vpjzip','/projects/Smoke/')
        await uploadProject.openProject('UniversalUISmoke/Universal/UniversalProj.vpj')
        const cartFunction = new CartridgeFunction(page);    
        await cartFunction.expandDirectory("Universal")
        //await cartFunction.expandDirectory("UniversalCart")
        await cartFunction.openCartridge("UniversalCart.car")
        await console.log("cartridge opened")
        }
        else
        {
            await console.log("workerInfo"+workerInfo.workerIndex)
            const loginPage = new LoginFunction(page);
            await loginPage.login("https://volante.qa-doc.volantetech.com/","nagarajan.r+33@volantetech.com","Login@123")
            const workspacePage= new WorkspaceFunction(page);
            await workspacePage.createWorkspace()
           // await workspacePage.gotoURL()
            const uploadProject = new ProjectFunction(page);
            await uploadProject.closeNotification()
            await uploadProject.uploadProject('./src/Smoke/UniversalMessage/testProject/UniversalProj.vpjzip','/projects/Smoke/')
            //const waitProject = new ProjectFunction(page);
            //await waitProject.closeNotification()
           // await waitProject.waitForProject()
            const cartFunction = new CartridgeFunction(page);    
            await cartFunction.expandDirectory("Universal")
            await cartFunction.openCartridge("UniversalCart.car")  
            }
            
            
        
    })
   
    test("Create universal plugin activity",async()=>{
        const universalCreate = new PluginFunction(page);
        await universalCreate.createPlugin(univMessage.cartridgeName,univMessage.messageName,univMessage.pluginName,univMessage.description,'Universal')
        
    })
   /* test("Verify Universal Format Details",async()=>{
        const universalMethods= new UniversalFunction(page)
        await universalMethods.formatDetails(univMessage.messageName,univMessage.versionInfo,univMessage.standardName,univMessage.standardVersion,univMessage.detailedName,univMessage.standardGroup,univMessage.typeDescription);
    }) */
    test("Click External Format",async()=>{
        const UniversalExternalFormat = new UniversalFunction(page)
        await UniversalExternalFormat.clickExternalFormat()
    })
    test("Verify Universal toolbar",async()=>{
        const universalToolbar = new UniversalFunction(page)
        await universalToolbar.verifyUniversalToolbar()
    })
    test("Verify table column names",async()=>{
        const universalTableName = new UniversalFunction(page)
        await universalTableName.verifyTableColumnName()
    })
    test("Add Field in a table",async()=>{
        const universalField = new UniversalFunction(page)
        await universalField.addField()
    })
    test("Edit Field in a table",async()=>{
        const editField = new UniversalFunction(page)
        await editField.editField(0,'TestField')
    })
    
  
   
   
   
    test("Select a data type",async()=>{
        const dataType = new UniversalFunction(page)
        await dataType.selectDataType('TestField','Integer')
    })
    test("Change the data type",async()=>{
        const dataType = new UniversalFunction(page)
        await dataType.selectDataType('TestField','String')
    }) 
    test("To type a description",async()=>{
        const desc = new UniversalFunction(page)
        await desc.typeDescription('TestField','test desc')
    })
    test("TO type detailed Name",async()=>{
        const detailedName = new UniversalFunction(page)
        await detailedName.typeDetailedName('TestField','test detailedName')
    })
    test("To enable Alias option",async()=>{
        const alias = new UniversalFunction(page)
        await alias.enableAlias()
    })
    test("To Type in the Alias option",async()=>{
        const typeAlias = new UniversalFunction(page)
        await typeAlias.typeAlias('TestField')
    })
    test("To expand the properties speed bar",async()=>{
        const expandProps = new UniversalFunction(page)
        await expandProps.expandPropertiesSpeedBar('TestField')
    })
    test("To verify the list of tabs for a field",async()=>{
        const tabList = new UniversalFunction(page)
        const expectedList = ["General","Position","Length","Tag","Text Encoding"]
        await tabList.verifyTabList(expectedList)
    })
    test("TO verify the General tab Required propety",async()=>{
        const generalTabReq = new UniversalFunction(page)
        await generalTabReq.generalDefaultRequired()
    })
    test ("To click on the checkbox of Required Property",async()=>{
        const checkReq = new UniversalFunction(page)
        await checkReq.generalTabClickRequired()
    })
    test("To verify the value in the Default Propety",async()=>{
        const verifyDef = new UniversalFunction(page)
        await verifyDef.generalDefaultValue()
    })
    test("To type in the Default text box",async()=>{
        const typeDefault = new UniversalFunction(page)
        await typeDefault.typeDefaultValue('1')
    })
    test("To default encoding option",async()=>{
        const defEncodingOption = new UniversalFunction(page)
        await defEncodingOption.defaultEncodingOption()
    })
    test("To select the encoding option",async()=>{
        const selectEncodingOpts = new UniversalFunction(page)
        await selectEncodingOpts.selectEncodingOption()
    })

    test("Add a facet button",async()=>{
        const facetButton = new UniversalFunction(page)
        await facetButton.clickFacetButton('TestField')
        await facetButton.facetsTable()
        await facetButton.facetsPattern()
        await facetButton.facetsEnumeration()
        await facetButton.facetsDialogControl('OK')
        await facetButton.verifyFacetsButtonColor()
    })
    test("To click and verify the position tab of a field",async()=>{
        const posTab = new UniversalFunction(page)
        await posTab.clickPositionTab()
        await posTab.verifyPositionTabValues('1','1','0')
    })
    test('To click the length tab and verify the properties in the length tab',async()=>{
        const lenTab = new UniversalFunction(page)
        await lenTab.clickLengthTab()
        await lenTab.verifyLengthFixedLengthRadioButton()
        await lenTab.typeLengthFixedLengthInput('1')
        await lenTab.verifyLengthPrecededRadioButton()
        await lenTab.clickLengthPrecededRadioButton()
        await lenTab.lengthPrecededLengthField()
        await lenTab.typeLengthPrecededLengthField("1")
        await lenTab.selectLengthPrecededLengthField('TestField')
        await lenTab.verifyLengthPrecededMinLength()
        await lenTab.typeLengthPrecededMinLength("1")
        await lenTab.verifyLenghtPrecedMaxLength()
       await lenTab.typeLengthPrecededMaxLength("1")
       await lenTab.verifyDelimitedRadioButton()
       await lenTab.clickDelimitedRadioButton()
       await lenTab.lengthDelimiterDelimiterHeading()
       await lenTab.selectDelimitedOptions('Default')
       await lenTab.checkFieldExcludeDelimiter()
       await lenTab.lengthDefaultDelimitedQuoteRelease()
       await lenTab.verifyOptionsFromQuoteFirstOne()
       await lenTab.selectOptionsFromQuoteFirstOne('Default')
      await lenTab.verifyOptionsFromQuoteSecondOne()
       await lenTab.selectOptionsFromQuoteSecondOne('Default')
       await lenTab.verifyOptionsFromQuoteThird()
     await lenTab.selectOptionsFromQuoteThird('Default')
      await lenTab.lengthTabVerifyminMaxLenghtLabel()
      await lenTab.lengthTabTypeMinLength('1')
      await lenTab.lengthTabTypeMaxLength('1')
    })
    test("To check the properties in the tag tab Field",async()=>{
        const tagTab = new UniversalFunction(page)
        await tagTab.selectTagTab()
        await tagTab.tagTabVeirfyTagLabel()
        await tagTab.tagTabTypeTagProperty('test')
        await tagTab.tagTabVerifySeparatorLabel()
        await tagTab.tagTabVerifySeparatorDropdown()
        await tagTab.tagTabTypeSeparatorProperty('test')
    })
    test("To verify the text encoding property",async()=>{
        const textEncodingTab = new UniversalFunction(page)
       await textEncodingTab.selectTextEncodingTab()
        await textEncodingTab.verifyTextEncodingJustificationLabel()
        await textEncodingTab.verifyTextEncodingJustificationDefaultValue()
        await textEncodingTab.verifyTextEncodingJustificationOptions()
        await textEncodingTab.selectOptionsTextEncodingJustification('Default')
        await textEncodingTab.verifyTextEncodingTerminatorLabel()
        await textEncodingTab.verifyTextEncodingTerminatorDefaultValue()
        await textEncodingTab.verifyTextEncodingTerminatorOptions()
        await textEncodingTab.selectOptionsTextEncodingTerminator('Default')
        await textEncodingTab.typeTextEncodingTerminatorProperty('Test')
        await textEncodingTab.verifyTextEncodingPaddingLabel()
        await textEncodingTab.verifyTextEncodingPaddingDefaultValue()
        await textEncodingTab.verifyTextEncodingPaddingOptions()
        await textEncodingTab.selectOptionsTextEncodingPadding('Default')
        await textEncodingTab.verifyTextEncodingTrimLabel()
        await textEncodingTab.verifyTextEncodingTrimDefaultValue()
        await textEncodingTab.verifyTextEncodingTrimOptions()
        await textEncodingTab.selectOptionsTextEncodingTrim('Default')
        await textEncodingTab.verifyTextEncodingLabel()
        await textEncodingTab.typeTextEncodingTextBox('test')
        await textEncodingTab.verifyTextEncodingParsedValueLabel()
        await textEncodingTab.typeTextEncodingParsedValueLabel('test')
        await textEncodingTab.editFormulaTextEncodingParsedValue('test')
        await textEncodingTab.verifyTextEncodingSerializedValueLabel()
        await textEncodingTab.typeTextEncodingSerializedValueLabel('test')
        await textEncodingTab.editFormulaTextEncodingSerializedValue('test')

    })
    test("Delete the Field",async()=>{
        const delField = new UniversalFunction(page)
        await delField.deleteField('TestField')
    }) 
    test("Disable Alias Field",async()=>{
        const disableAlias = new UniversalFunction(page)
        await disableAlias.disableAlias()
    })
    test("To collapse the properties speed bar (Field)",async()=>{
        const collapseProps = new UniversalFunction(page)
        await collapseProps.collapsePropertiesSpeedBar()
    }) 

    test("Add a Filler in a table",async()=>{
        const filler = new UniversalFunction(page)
     //   await filler.clickExternalFormat()
        await filler.addFiller()
    })
    test("To type a description Filler",async()=>{
        const desc = new UniversalFunction(page)
        await desc.typeDescription('FILLER','test desc')
    })
    test("TO type detailed Name Filler",async()=>{
        const detailedName = new UniversalFunction(page)
        await detailedName.typeDetailedName('FILLER','test detailedName')
    })
    test("To enable Alias option Filler",async()=>{
        const alias = new UniversalFunction(page)
        await alias.enableAlias()
    })
    test("To Type in the Alias option Filler",async()=>{
        const typeAlias = new UniversalFunction(page)
        await typeAlias.typeAlias('FILLER')
    })
    test("To expand the properties speed bar Filler",async()=>{
        const expandProps = new UniversalFunction(page)
        await expandProps.expandPropertiesSpeedBar('FILLER')
    })
    test("To verify the list of tabs in the property speed bar for the filler",async()=>{
        const tabList = new UniversalFunction(page)
         const expectedList = ["General","Position","Length","Tag","Text Encoding"]
        await tabList.verifyFillerTabList(expectedList)
    }) 
    test ("To verify the general tab of the filler field",async()=>{
        const fillerGeneral = new UniversalFunction(page)
       await  fillerGeneral.generalDefaultRequired()
        await fillerGeneral.generalTabClickRequired()
        await fillerGeneral.typeFillerGeneralFixedValue('2')
        await fillerGeneral.defaultEncodingOption()
        await fillerGeneral.selectEncodingOption()
        await fillerGeneral.clickFacetButton('FILLER')
        await fillerGeneral.facetsTable()
        await fillerGeneral.facetsPattern()
        await fillerGeneral.facetsEnumeration()
        await fillerGeneral.facetsDialogControl('OK')
        await fillerGeneral.verifyFacetsButtonColor()
    }) 
    test("To verify the position tab in the property speed bar in the filler",async()=>{
        const positionTab = new UniversalFunction(page)
        await positionTab.clickPositionTab()
        await positionTab.verifyPositionTabValues('1','1','0')

    })
    test('To verify the length tab of filler field in the properties speed bar',async()=>{
        const fillerLengthTab = new UniversalFunction(page)
        await fillerLengthTab.clickLengthTab()
        await fillerLengthTab.verifyLengthFixedLengthRadioButton()
        await fillerLengthTab.typeLengthFixedLengthInput('1')
        await fillerLengthTab.verifyLengthPrecededRadioButton()
        await fillerLengthTab.clickLengthPrecededRadioButton()
        await fillerLengthTab.lengthPrecededLengthField()
        await fillerLengthTab.typeLengthPrecededLengthField('1')
        await fillerLengthTab.selectLengthPrecededLengthField('FILLER')
        await fillerLengthTab.verifyLengthPrecededMinLength()
        await fillerLengthTab.typeLengthPrecededMinLength('1')
        await fillerLengthTab.verifyLenghtPrecedMaxLength()
        await fillerLengthTab.typeLengthPrecededMaxLength('1')
        await fillerLengthTab.verifyDelimitedRadioButton()
        await fillerLengthTab.clickDelimitedRadioButton()
        await fillerLengthTab.lengthDelimiterDelimiterHeading()
        await fillerLengthTab.selectDelimitedOptions('Default')
        await fillerLengthTab.checkFieldExcludeDelimiter()
        await fillerLengthTab.lengthDefaultDelimitedQuoteRelease()
        await fillerLengthTab.verifyOptionsFromQuoteFirstOne()
        await fillerLengthTab.selectOptionsFromQuoteFirstOne('Default')
        await fillerLengthTab.verifyOptionsFromQuoteSecondOne()
        await fillerLengthTab.selectOptionsFromQuoteSecondOne('Default')
        await fillerLengthTab.verifyOptionsFromQuoteThird()
        await fillerLengthTab.selectOptionsFromQuoteThird('Default')
        await fillerLengthTab.lengthTabVerifyminMaxLenghtLabel()
        await fillerLengthTab.lengthTabTypeMinLength('1')
        await fillerLengthTab.lengthTabTypeMaxLength('1')
    })
    test('To verify the Tag tab Filler',async()=>{
        const tagTab = new UniversalFunction(page)
        await tagTab.selectTagTab()
        await tagTab.tagTabVeirfyTagLabel()
        await tagTab.tagTabTypeTagProperty('1')
        await tagTab.tagTabVerifySeparatorLabel()
        await tagTab.tagTabVerifySeparatorDropdown()
        await tagTab.tagTabTypeSeparatorProperty('test')

    })
    test("To verify the Text encoding tab",async()=>{
        const fillerTextEncoding = new UniversalFunction(page)
        await fillerTextEncoding.selectTextEncodingTab()
        await fillerTextEncoding.verifyTextEncodingJustificationLabel()
        await fillerTextEncoding.verifyTextEncodingJustificationDefaultValue()
        await fillerTextEncoding.verifyTextEncodingJustificationOptions()
        await fillerTextEncoding.selectOptionsTextEncodingJustification('Default')
        await fillerTextEncoding.verifyTextEncodingTerminatorLabel()
        await fillerTextEncoding.verifyTextEncodingTerminatorDefaultValue()
        await fillerTextEncoding.verifyTextEncodingTerminatorOptions()
        await fillerTextEncoding.selectOptionsTextEncodingTerminator('Default')
        await fillerTextEncoding.typeTextEncodingTerminatorProperty('Test')
        await fillerTextEncoding.verifyTextEncodingPaddingLabel()
        await fillerTextEncoding.verifyTextEncodingPaddingDefaultValue()
        await fillerTextEncoding.verifyTextEncodingPaddingOptions()
        await fillerTextEncoding.selectOptionsTextEncodingPadding('Default')
        await fillerTextEncoding.verifyTextEncodingTrimLabel()
        await fillerTextEncoding.verifyTextEncodingTrimDefaultValue()
        await fillerTextEncoding.verifyTextEncodingTrimOptions()
        await fillerTextEncoding.selectOptionsTextEncodingTrim('Default')
    })
    test("Delete the Filler",async()=>{
        const delField = new UniversalFunction(page)
        await delField.deleteField('FILLER')
    }) 

    test("Disable Alias Filler",async()=>{
        const disableAlias = new UniversalFunction(page)
        await disableAlias.disableAlias()
    })
    test("To collapse the properties speed bar (Filler)",async()=>{
        const collapseProps = new UniversalFunction(page)
        await collapseProps.collapsePropertiesSpeedBar()
    }) 
    test("Add a section",async()=>{
        const sectionUniv= new UniversalFunction(page)
      //  await sectionUniv.clickExternalFormat()
        await sectionUniv.addSection()
    })
    test("Edit a Section",async()=>{
        const editSecUniv = new UniversalFunction(page)
        await editSecUniv.editSection('New Section','TestSection')
    })
    test("Collapse a section",async()=>{
        const collapseSecUniv = new UniversalFunction(page)
        await collapseSecUniv.collapseSection('TestSection')
    })
    test("To type a description Section",async()=>{
        const desc = new UniversalFunction(page)
        await desc.typeDescription('TestSection','test desc')
    })
    test("TO type detailed Name Section",async()=>{
        const detailedName = new UniversalFunction(page)
        await detailedName.typeDetailedName('TestSection','test detailedName')
    })
    test("To enable Alias option Section",async()=>{
        const alias = new UniversalFunction(page)
        await alias.enableAlias()
    })
    test("To Type in the Alias option Section",async()=>{
        const typeAlias = new UniversalFunction(page)
        await typeAlias.typeAlias('TestSection')
    })
    
    test("To expand the properties speed bar Section",async()=>{
        const expandProps = new UniversalFunction(page)
        await expandProps.expandPropertiesSpeedBar('TestSection')
    }) 
    test("To verify the section tab list",async()=>{
        const sectionTabList = new UniversalFunction(page)
      const expectedList = ["Occurrence","Position","Length","Tag","Field Delimiter"]
        await sectionTabList.verifySectionTabList(expectedList)
    })
    test("To verify the Occurence tab of the section",async()=>{
        const occurrenceTab = new UniversalFunction(page)
        await occurrenceTab.verifySectionPropertiesOccurrenceTabRadioButtons(3)
        await occurrenceTab.verifyPropertiesFixedInstanceLabel()
        await occurrenceTab.verifyFixedInstancesCountLabel()
        await occurrenceTab.typeFixedInstancesCountValue('1')
        await occurrenceTab.verifyVariableInstancesLabel()
        await occurrenceTab.clickVariableInstances()
        await occurrenceTab.verifyVariableInstancesCountLabel()
        await occurrenceTab.typeVariableInstancesCountFieldProperty('1')
        await occurrenceTab.verifyFormulaFunctionIcon()
        await occurrenceTab.selectFromCountFieldDropdown('TestSection')
        await occurrenceTab.verifyOccurrenceMinOccursDefaultValue()
        await occurrenceTab.verifyOccurrenceMaxOccursDefaultValue()
        await occurrenceTab.typeOccurrenceVariableInstanceMinOccursValue('1')
        await occurrenceTab.typeOccurrenceVariableInstanceMaxOccursValue('1')
        await occurrenceTab.selectOptionFromMinOccurs('0')
        await occurrenceTab.selectOptionFromMaxOccursVariableInstances('Unbounded')
        await occurrenceTab.verifyOptionsInMinOccursVariableInstances()
        await occurrenceTab.verifyOptionsInMaxOccursVariableInstances()
        await occurrenceTab.clickDiscriminatedRadioButton()
        await occurrenceTab.verifyDiscriminatedDiscriminator()
        await occurrenceTab.verifyDiscriminatorFormulaIcon()
        await occurrenceTab.typeOccurrenceDiscriminator('test')
        await occurrenceTab.verifyOccurenceDiscriminatorEditFormula('test')
        await occurrenceTab.verifyMinMaxLabelsDiscriminated()
        await occurrenceTab.verifyDiscriminatedMinOccursDefaultValue()
        await occurrenceTab.verifyDiscriminatedMaxOccursDefaultValue()
        await occurrenceTab.verifyOptionsInMinOccursDiscriminated()
        await occurrenceTab.verifyOptionsInMaxOccursDiscriminated()
        await occurrenceTab.typeOccurrenceMinOccursValue('1')
        await occurrenceTab.typeOccurrenceMaxOccursValue('1')
    })
    test("To Verify the position tab",async()=>{
        const sectionPos = new UniversalFunction(page)
        await sectionPos.clickPositionTab()
        await sectionPos.verifyPositionTabValues('1','1','0')
    })
    test("To Verify the Length tab",async()=>{
        const sectionLengthTab = new UniversalFunction(page)
        await sectionLengthTab.clickPropertiesLengthTab()
        await sectionLengthTab.verifyRadioSelectionAutoLengthTab()
        await sectionLengthTab.verifyLabelAutoLengthTab()
        await sectionLengthTab.clickAutoRadioButtonLengthTab()
        await sectionLengthTab.clickLengthPrecededLenghtTab()
        await sectionLengthTab.verifyLabelLengthField()
        await sectionLengthTab.selectFromLengthFieldDropdown('TestSection')
        await sectionLengthTab.typeLengthFieldLengthPreceded('1')
        await sectionLengthTab.verifyTrailingNullFieldLabel()
        await sectionLengthTab.defaultOptionsInTrailingNullFields()
        await sectionLengthTab.verifyOptionsInTrailingNullFields()
        await sectionLengthTab.selectOptionInTrailingNullFields('Do not trim')
        await sectionLengthTab.clickDelimitedLengthSequence()
        await sectionLengthTab.verifyInstanceDelimiterLabel()
        await sectionLengthTab.typeInstanceDelimiterDelimited('test')
        await sectionLengthTab.verifyOptionsInstanceDelimiter()
        await sectionLengthTab.selectOptionsInstanceDelimited('Default')
        await sectionLengthTab.verifySectionDelimiterLabel()
        await sectionLengthTab.typeSectionDelimiterDelimited('test')
        await sectionLengthTab.verifyOptionsSectionDelimiter()
        await sectionLengthTab.selectOptionsSectionDelimited('Default')
        await sectionLengthTab.verifyLabelExcludeDelimiter()
        await sectionLengthTab.checkExcludeDelimiter()
        await sectionLengthTab.verifyTrailingNullFieldsDelimitedLabel()
        await sectionLengthTab.verifyOptionsTrailingNullFieldsDelimiter()
        await sectionLengthTab.selectOptionsTrailingNullFieldsDelimited('Do not trim') 
    })
    test("Verify the tag tab Section", async()=>{
        const sectionTag = new UniversalFunction(page)
        await sectionTag.selectTagTab()
        await sectionTag.tagTabVeirfyTagLabel()
        await sectionTag.tagTabTypeTagProperty('1')
        await sectionTag.tagTabVerifySeparatorLabel()
        await sectionTag.tagTabVerifySeparatorDropdown()
        await sectionTag.tagTabTypeSeparatorProperty('test')
    })
    test('To verify the Field Delimiter tab',async()=>{
        const sectionFieldDelimiter = new UniversalFunction(page)
        await  sectionFieldDelimiter.clickFieldDelimiter()
        await sectionFieldDelimiter.verifyLabelDelimiterFieldDelimiter()
        await sectionFieldDelimiter.verifyOptionsDelimiterFieldDelimiter()
        await sectionFieldDelimiter.selectOptionDelimiterFieldDelimiter('Default')
        await sectionFieldDelimiter.verifyLabelQuotesFieldDelimiter()
        await sectionFieldDelimiter.verifyDefaultValueFirstQuotesFieldDelimiter()
        await sectionFieldDelimiter.typeSequenceFirstQuotesFieldDelimiter()
        await sectionFieldDelimiter.verifySequenceOptionsFirstQuotesFieldDelimiter()
        await sectionFieldDelimiter.selectOptionQuotesDelimiterFieldDelimiter('Default')
        await sectionFieldDelimiter.verifyDefaultValueSecondQuotesFieldDelimiter()
        await sectionFieldDelimiter.typeSequenceSecondQuotesFieldDelimiter()
        await sectionFieldDelimiter.verifySequenceOptionsSecondQuotesFieldDelimiter()
        await sectionFieldDelimiter.selectOptionQuotesSecondDelimiterFieldDelimiter('Default')
        await sectionFieldDelimiter.verifyDefaultValueThirdQuotesFieldDelimiter()
        await sectionFieldDelimiter.verifySequenceOptionsThirdQuotesFieldDelimiter()
        await sectionFieldDelimiter.selectOptionQuotesThirdDelimiterFieldDelimiter('Default') 

    })
    test("Delete the Section",async()=>{
        const delField = new UniversalFunction(page)
        await delField.deleteField('TestSection')
    }) 
    test("Disable Alias Section",async()=>{
        const disableAlias = new UniversalFunction(page)
        await disableAlias.disableAlias()
    })
    test("To collapse the properties speed bar (Section)",async()=>{
        const collapseProps = new UniversalFunction(page)
        await collapseProps.collapsePropertiesSpeedBar()
    }) 
    test ("Add a choice",async()=>{
        const addChoice = new UniversalFunction(page)
       // await addChoice.clickExternalFormat()
        await addChoice.addChoice()
    })
    test("Edit a choice",async()=>{
        const editChoice = new UniversalFunction(page)
        await editChoice.editChoice('New Choice','TestChoice')
    })
    test("Collapse a choice",async()=>{
        const collapseChoice = new UniversalFunction(page)
        await collapseChoice.collapseChoice('TestChoice')
    })
    test("To type a description choice",async()=>{
        const desc = new UniversalFunction(page)
        await desc.typeDescription('TestChoice','test desc')
    })
    test("TO type detailed Name choice",async()=>{
        const detailedName = new UniversalFunction(page)
        await detailedName.typeDetailedName('TestChoice','test detailedName')
    })
    test("To enable Alias option choice",async()=>{
        const alias = new UniversalFunction(page)
        await alias.enableAlias()
    })
    test("To Type in the Alias option choice",async()=>{
        const typeAlias = new UniversalFunction(page)
        await typeAlias.typeAlias('TestChoice')
    })
    test("To expand the properties speed bar choice",async()=>{
        const expandProps = new UniversalFunction(page)
        await expandProps.expandPropertiesSpeedBar('TestChoice')
    })
    test("To verify the Choice tab list",async()=>{
        const sectionTabList = new UniversalFunction(page)
        const expectedList = ["Occurrence","Position","Length","Tag","Field Delimiter","Discriminator","Choice Filler"]
        await sectionTabList.verifySectionTabList(expectedList)
    }) 
    test('To verify the occurrence tab of Chioce field',async()=>{
        const choiceOccurrenceTab = new UniversalFunction(page);
        await choiceOccurrenceTab.verifyPropertiesFixedInstanceLabel()
        await choiceOccurrenceTab.verifyFixedInstancesCountLabel()
        await choiceOccurrenceTab.typeFixedInstancesCountValue('1')
        await choiceOccurrenceTab.verifyVariableInstancesLabel()
        await choiceOccurrenceTab.clickVariableInstances()
        await choiceOccurrenceTab.verifyVariableInstancesCountLabel()
        await choiceOccurrenceTab.typeVariableInstancesCountFieldProperty('1')
        await choiceOccurrenceTab.verifyFormulaFunctionIcon()
        await choiceOccurrenceTab.selectFromCountFieldDropdown('TestChoice')
        await choiceOccurrenceTab.verifyOccurrenceMinOccursDefaultValue()
        await choiceOccurrenceTab.verifyOccurrenceMaxOccursDefaultValue()
        await choiceOccurrenceTab.typeOccurrenceVariableInstanceMinOccursValue('1')
        await choiceOccurrenceTab.typeOccurrenceVariableInstanceMaxOccursValue('1')
        await choiceOccurrenceTab.selectOptionFromMinOccurs('0')
        await choiceOccurrenceTab.selectOptionFromMaxOccursVariableInstances('Unbounded')
        await choiceOccurrenceTab.verifyOptionsInMinOccursVariableInstances()
        await choiceOccurrenceTab.verifyOptionsInMaxOccursVariableInstances()
        await choiceOccurrenceTab.clickDiscriminatedRadioButton()
        await choiceOccurrenceTab.verifyDiscriminatedDiscriminator()
        await choiceOccurrenceTab.verifyDiscriminatorFormulaIcon()
        await choiceOccurrenceTab.typeOccurrenceDiscriminator('test')
        await choiceOccurrenceTab.verifyOccurenceDiscriminatorEditFormula('test')
        await choiceOccurrenceTab.verifyMinMaxLabelsDiscriminated()
        await choiceOccurrenceTab.verifyDiscriminatedMinOccursDefaultValue()
        await choiceOccurrenceTab.verifyDiscriminatedMaxOccursDefaultValue()
        await choiceOccurrenceTab.verifyOptionsInMinOccursDiscriminated()
        await choiceOccurrenceTab.verifyOptionsInMaxOccursDiscriminated()
        await choiceOccurrenceTab.typeOccurrenceMinOccursValue('1')
        await choiceOccurrenceTab.typeOccurrenceMaxOccursValue('1')
    })
    test("To click and verify the position tab of a Choice",async()=>{
        const posTab = new UniversalFunction(page)
        await posTab.clickPositionTab()
        await posTab.verifyPositionTabValues('1','1','0')
    })
    test("To Verify the choice Length tab",async()=>{
         const choiceLengthTab = new UniversalFunction(page)
         await choiceLengthTab.clickPropertiesLengthTab()
         await choiceLengthTab.verifyRadioSelectionAutoLengthTab()
         await choiceLengthTab.verifyLabelAutoLengthTab()
         await choiceLengthTab.clickAutoRadioButtonLengthTab()
         await choiceLengthTab.clickLengthPrecededLenghtTab()
         await choiceLengthTab.verifyLabelLengthField()
         await choiceLengthTab.selectFromLengthFieldDropdown('TestChoice')
         await choiceLengthTab.typeLengthFieldLengthPreceded('1')
         await choiceLengthTab.verifyTrailingNullFieldLabel()
         await choiceLengthTab.defaultOptionsInTrailingNullFields()
         await choiceLengthTab.verifyOptionsInTrailingNullFields()
         await choiceLengthTab.selectOptionInTrailingNullFields('Do not trim')
         await choiceLengthTab.clickDelimitedLengthSequence()
         await choiceLengthTab.verifyInstanceDelimiterLabel()
         await choiceLengthTab.typeInstanceDelimiterDelimited('test')
         await choiceLengthTab.verifyOptionsInstanceDelimiter()
         await choiceLengthTab.selectOptionsInstanceDelimited('Default')
         await choiceLengthTab.verifySectionDelimiterLabel()
         await choiceLengthTab.typeSectionDelimiterDelimited('test')
         await choiceLengthTab.verifyOptionsSectionDelimiter()
         await choiceLengthTab.selectOptionsSectionDelimited('Default')
         await choiceLengthTab.verifyLabelExcludeDelimiter()
         await choiceLengthTab.checkExcludeDelimiter()
         await choiceLengthTab.verifyTrailingNullFieldsDelimitedLabel()
         await choiceLengthTab.verifyOptionsTrailingNullFieldsDelimiter()
         await choiceLengthTab.selectOptionsTrailingNullFieldsDelimited('Do not trim') 
     })
     test("To check the properties in the tag tab CHoice",async()=>{
        const tagTab = new UniversalFunction(page)
        await tagTab.selectTagTab()
        await tagTab.tagTabVeirfyTagLabel()
        await tagTab.tagTabTypeTagProperty('test')
        await tagTab.tagTabVerifySeparatorLabel()
        await tagTab.tagTabVerifySeparatorDropdown()
        await tagTab.tagTabTypeSeparatorProperty('test') 
    })
    test("To verify the choice Field Delimiter property",async()=>{
        const choiceFieldDelimiterTab = new UniversalFunction(page)
        await choiceFieldDelimiterTab.clickChoiceFieldDelimiter()
        await choiceFieldDelimiterTab.verifyLabelDelimiterFieldDelimiter()
        await choiceFieldDelimiterTab.verifyOptionsDelimiterFieldDelimiter()
        await choiceFieldDelimiterTab.selectOptionDelimiterFieldDelimiter('Default')
        await choiceFieldDelimiterTab.verifyLabelQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.verifyDefaultValueFirstQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.typeSequenceFirstQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.verifySequenceOptionsFirstQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.selectOptionQuotesDelimiterFieldDelimiter('Default')
        await choiceFieldDelimiterTab.verifyDefaultValueSecondQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.typeSequenceSecondQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.verifySequenceOptionsSecondQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.selectOptionQuotesSecondDelimiterFieldDelimiter('Default')
        await choiceFieldDelimiterTab.verifyDefaultValueThirdQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.verifySequenceOptionsThirdQuotesFieldDelimiter()
        await choiceFieldDelimiterTab.selectOptionQuotesThirdDelimiterFieldDelimiter('Default') 
    })
    test("TO verify the choice Discriminator tab",async()=>{
        const choiceDiscriminatorTab = new UniversalFunction(page)
        await choiceDiscriminatorTab.clickDiscriminatorTab()
        await choiceDiscriminatorTab.verifyLabelsOfTable()
    })
    test("To verify the Choice Choice-Filler tab",async()=>{
        const choiceFIllerTab = new UniversalFunction(page)
        await choiceFIllerTab.clickChoiceFiller()
        await choiceFIllerTab.verifyLabelOfPadProperty()
        await choiceFIllerTab.clickPadPropertyCheckBox()
    })
    test("Delete the Choice - Choice",async()=>{
        const delField = new UniversalFunction(page)
        await delField.deleteField('TestChoice')
    }) 
    test("Disable Alias Choice",async()=>{
        const disableAlias = new UniversalFunction(page)
        await disableAlias.disableAlias()
    })
    test("To collapse the properties speed bar (Choice)",async()=>{
        const collapseProps = new UniversalFunction(page)
        await collapseProps.collapsePropertiesSpeedBar()
    }) 
    test("To add all section",async()=>{
        const allSection = new UniversalFunction(page)
     //   await allSection.clickExternalFormat()
        await allSection.addAll()
    })
    test ("To edit a all section",async()=>{
        const editAll = new UniversalFunction(page)
        await editAll.editAll('New All','TestAllSection')
    })
    test( "To collpase the all section",async()=>{
        const collapseAll = new UniversalFunction(page)
        await collapseAll.collapseAll('TestAllSection')
    })
    test("To expand the AllSection properties speed bar",async()=>{
        const expandProps = new UniversalFunction(page)
        await expandProps.expandPropertiesSpeedBar('TestAllSection')
    })
    test('To verify the occurrence tab of All Section field',async()=>{
         const allSectionOccurrenceTab = new UniversalFunction(page);
          await allSectionOccurrenceTab.verifyPropertiesFixedInstanceLabel()
          await allSectionOccurrenceTab.verifyFixedInstancesCountLabel()
          await allSectionOccurrenceTab.typeFixedInstancesCountValue('1')
          await allSectionOccurrenceTab.verifyVariableInstancesLabel()
          await allSectionOccurrenceTab.clickVariableInstances()
          await allSectionOccurrenceTab.verifyVariableInstancesCountLabel()
          await allSectionOccurrenceTab.typeVariableInstancesCountFieldProperty('1')
          await allSectionOccurrenceTab.verifyFormulaFunctionIcon()
          await allSectionOccurrenceTab.selectFromCountFieldDropdown('TestAllSection')
          await allSectionOccurrenceTab.verifyOccurrenceMinOccursDefaultValue()
          await allSectionOccurrenceTab.verifyOccurrenceMaxOccursDefaultValue()
          await allSectionOccurrenceTab.typeOccurrenceVariableInstanceMinOccursValue('1')
          await allSectionOccurrenceTab.typeOccurrenceVariableInstanceMaxOccursValue('1')
          await allSectionOccurrenceTab.selectOptionFromMinOccurs('0')
          await allSectionOccurrenceTab.selectOptionFromMaxOccursVariableInstances('Unbounded')
          await allSectionOccurrenceTab.verifyOptionsInMinOccursVariableInstances()
          await allSectionOccurrenceTab.verifyOptionsInMaxOccursVariableInstances()
          await allSectionOccurrenceTab.clickDiscriminatedRadioButton()
          await allSectionOccurrenceTab.verifyDiscriminatedDiscriminator()
          await allSectionOccurrenceTab.verifyDiscriminatorFormulaIcon()
          await allSectionOccurrenceTab.typeOccurrenceDiscriminator('test')
          await allSectionOccurrenceTab.verifyOccurenceDiscriminatorEditFormula('test')
          await allSectionOccurrenceTab.verifyMinMaxLabelsDiscriminated()
          await allSectionOccurrenceTab.verifyDiscriminatedMinOccursDefaultValue()
          await allSectionOccurrenceTab.verifyDiscriminatedMaxOccursDefaultValue()
          await allSectionOccurrenceTab.verifyOptionsInMinOccursDiscriminated()
          await allSectionOccurrenceTab.verifyOptionsInMaxOccursDiscriminated()
          await allSectionOccurrenceTab.typeOccurrenceMinOccursValue('1')
          await allSectionOccurrenceTab.typeOccurrenceMaxOccursValue('1')
      })
      test("To click and verify the position tab of a All Section field",async()=>{
          const posTab = new UniversalFunction(page)
          await posTab.clickPositionTab()
          await posTab.verifyPositionTabValues('1','1','0')
      })
      test("To Verify the All Section Length tab",async()=>{
           const allSectionLengthTab = new UniversalFunction(page)
           await allSectionLengthTab.clickPropertiesLengthTab()
           await allSectionLengthTab.verifyRadioSelectionAutoLengthTab()
           await allSectionLengthTab.verifyLabelAutoLengthTab()
           await allSectionLengthTab.clickAutoRadioButtonLengthTab()
           await allSectionLengthTab.clickLengthPrecededLenghtTab()
           await allSectionLengthTab.verifyLabelLengthField()
           await allSectionLengthTab.selectFromLengthFieldDropdown('TestAllSection')
           await allSectionLengthTab.typeLengthFieldLengthPreceded('1')
           await allSectionLengthTab.verifyTrailingNullFieldLabel()
           await allSectionLengthTab.defaultOptionsInTrailingNullFields()
           await allSectionLengthTab.verifyOptionsInTrailingNullFields()
           await allSectionLengthTab.selectOptionInTrailingNullFields('Do not trim')
           await allSectionLengthTab.clickDelimitedLengthSequence()
           await allSectionLengthTab.verifyInstanceDelimiterLabel()
           await allSectionLengthTab.typeInstanceDelimiterDelimited('test')
           await allSectionLengthTab.verifyOptionsInstanceDelimiter()
           await allSectionLengthTab.selectOptionsInstanceDelimited('Default')
           await allSectionLengthTab.verifySectionDelimiterLabel()
           await allSectionLengthTab.typeSectionDelimiterDelimited('test')
           await allSectionLengthTab.verifyOptionsSectionDelimiter()
           await allSectionLengthTab.selectOptionsSectionDelimited('Default')
           await allSectionLengthTab.verifyLabelExcludeDelimiter()
           await allSectionLengthTab.checkExcludeDelimiter()
           await allSectionLengthTab.verifyTrailingNullFieldsDelimitedLabel()
           await allSectionLengthTab.verifyOptionsTrailingNullFieldsDelimiter()
           await allSectionLengthTab.selectOptionsTrailingNullFieldsDelimited('Do not trim')
       })
       test("To check the properties in the All Section tag tab",async()=>{
          const tagTab = new UniversalFunction(page)
          await tagTab.selectTagTab()
          await tagTab.tagTabVeirfyTagLabel()
          await tagTab.tagTabTypeTagProperty('test')
          await tagTab.tagTabVerifySeparatorLabel()
          await tagTab.tagTabVerifySeparatorDropdown()
          await tagTab.tagTabTypeSeparatorProperty('test')
      })
      test("To verify the All Section Field Delimiter property",async()=>{
          const allSectionFieldDelimiterTab = new UniversalFunction(page)
          await allSectionFieldDelimiterTab.clickAllSectionDelimiter()
          await allSectionFieldDelimiterTab.verifyLabelDelimiterFieldDelimiter()
          await allSectionFieldDelimiterTab.verifyOptionsDelimiterFieldDelimiter()
          await allSectionFieldDelimiterTab.selectOptionDelimiterFieldDelimiter('Default')
          await allSectionFieldDelimiterTab.verifyLabelQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.verifyDefaultValueFirstQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.typeSequenceFirstQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.verifySequenceOptionsFirstQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.selectOptionQuotesDelimiterFieldDelimiter('Default')
          await allSectionFieldDelimiterTab.verifyDefaultValueSecondQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.typeSequenceSecondQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.verifySequenceOptionsSecondQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.selectOptionQuotesSecondDelimiterFieldDelimiter('Default')
          await allSectionFieldDelimiterTab.verifyDefaultValueThirdQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.verifySequenceOptionsThirdQuotesFieldDelimiter()
          await allSectionFieldDelimiterTab.selectOptionQuotesThirdDelimiterFieldDelimiter('Default')
      })
      test("TO verify the All Discriminator tab",async()=>{
         const allSectionDiscriminatorTab = new UniversalFunction(page)
          await allSectionDiscriminatorTab.clickDiscriminatorTab()
          await allSectionDiscriminatorTab.verifyLabelsOfTable()
      })
      test("Delete the ALL Section",async()=>{
        const delField = new UniversalFunction(page)
        await delField.deleteField('TestAllSection')
    }) 
    
    test("To collapse the properties speed bar (All)",async()=>{
        const collapseProps = new UniversalFunction(page)
        await collapseProps.collapsePropertiesSpeedBar()
    }) 
    
})